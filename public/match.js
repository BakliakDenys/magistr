const express = require('express');
const router = express.Router();
const authMiddleware = require('./authMiddleware');
const { Profile } = require('./profile');

const {
  tokenize,
  computeTF,
  computeIDF,
  computeTFIDF,
  cosineSimilarity
} = require('./tfidf');

router.get('/mentor/matches', authMiddleware, async (req, res) => {
  try {
    const mentor = await Profile.findOne({ email: req.user.email });

    if (!mentor || mentor.badge !== 'mentor') {
      return res.status(400).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –º–µ–Ω—Ç–æ—Ä–æ–º' });
    }

    const startups = await Profile.find({ badge: 'startup' });

    // –ü–æ–±—É–¥–æ–≤–∞ —Ç–µ–∫—Å—Ç—É –º–µ–Ω—Ç–æ—Ä–∞ –∑ –≤–∞–≥–∞–º–∏
    const mentorText = [
      (mentor.mentorData.requestTypes || []).join(' ').repeat(5),       // –ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ
      (mentor.mentorData.industries || []).join(' ').repeat(2),
      mentor.mentorData.description || '',
      (mentor.mentorData.comfortableStages || []).join(' ')
    ].join(' ');

    // –ü–æ–±—É–¥–æ–≤–∞ —Ç–µ–∫—Å—Ç—ñ–≤ —Å—Ç–∞—Ä—Ç–∞–ø—ñ–≤ –∑ –≤–∞–≥–∞–º–∏
    const startupTexts = startups.map(s => [
      (s.startupData.needs || []).join(' ').repeat(5),                  // –ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ
      (s.startupData.industry || '').repeat(2),
      s.startupData.description || '',
      s.startupData.stage || ''
    ].join(' '));

    const idf = computeIDF([...startupTexts, mentorText]);              // –í—Ä–∞—Ö–æ–≤—É—î –≤—Å—ñ —Ç–µ–∫—Å—Ç–∏
    const mentorTFIDF = computeTFIDF(computeTF(mentorText), idf);

    const scored = startups.map((startup, index) => {
      const tfidf = computeTFIDF(computeTF(startupTexts[index]), idf);
      const score = cosineSimilarity(mentorTFIDF, tfidf);
      console.log(`üéØ [${startup.startupData.startupName}] ‚Üí Score: ${score.toFixed(3)}`);
      return { startup, score };
    });

    scored.sort((a, b) => b.score - a.score);

    const top3 = scored
      .filter(item => item.score > 0.01)
      .slice(0, 3)
      .map(item => ({
        email: item.startup.email,
        name: item.startup.startupData.startupName,
        industry: item.startup.startupData.industry,
        stage: item.startup.startupData.stage,
        description: item.startup.startupData.description,
        score: item.score.toFixed(3),
        avatarUrl: item.startup.avatarUrl
      }));

    res.json(top3);

  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∑–±—ñ–≥—ñ–≤:', err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
  }
});

module.exports = router;
